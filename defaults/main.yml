# Global installtation variables
prometheus_stack_install_cadvisor: true
prometheus_stack_install_exporter: true
prometheus_stack_install_gateway: true
prometheus_stack_install_prometheus: true
prometheus_stack_install_grafana: true
prometheus_stack_install_alertmanager: true
prometheus_stack_install_prometheus-tg-bot: true
prometheus_stack_install_graylog: true
prometheus_stack_install_prometheus_tg_bot: false
prometheus_stack_install_blackbox_exporter: true

prometheus_stack_docker_network: prometheus-stack

#Prometheus
prometheus_stack_prometheus_port: 9090
prometheus_stack_prometheus_docker_network: prometheus
prometheus_stack_prometheus_additional_command_args: ''
prometheus_stack_prometheus_version: v2.13.0
prometheus_stack_prometheus_config_path: /etc/prometheus
prometheus_stack_prometheus_data: /opt/prometheus/data
prometheus_stack_prometheus_static_targets:
  - jobname: prometheus
    host: localhost
    metrics_path: /metrics
    port: 9090
prometheus_stack_prometheus_addition_target:
  - ip: 127.0.0.1
    ports:
      - "{{ prometheus_stack_node_exporter_port }}"
      - 8080
      - 8889
prometheus_stack_prometheus_alertmanagers:
  - scheme: http
    static_configs:
      - targets:
          - "alertmanager:{{ prometheus_stack_alertmanager_port }}"

# Node exporter
prometheus_stack_node_exporter_port: 9100
prometheus_stack_node_exporter_version: v0.18.1
prometheus_stack_node_exporter_args:
  - '--path.procfs=/host/proc'
  - '--path.rootfs=/rootfs'
  - '--path.sysfs=/host/sys'
  - '--collector.filesystem.ignored-mount-points'
  - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'

# Push gateway
prometheus_stack_push_gateway_version: v0.7.0
prometheus_stack_push_gateway_port: 9091

# CAdvisor
prometheus_stack_cadvisor_port: 8080
prometheus_stack_cadvisor_version: v0.33.0
prometheus_stack_cavdisor_args: ""

# Grafana
prometheus_stack_grafana_port: 3000
prometheus_stack_grafana_version: 6.6.2
prometheus_stack_grafana_admin_user: admin
prometheus_stack_grafana_admin_password: admin
prometheus_stack_grafana_config_path: /etc/grafana
prometheus_stack_grafana_data: /opt/grafana
prometheus_stack_grafana_dashboards_path: "grafana/*"

# Alertmanager
prometheus_stack_alertmanager_port: "9093"
prometheus_stack_alertmanager_config_path: /etc/alertmanager
prometheus_stack_alertmanager_version: "v0.20.0"
prometheus_stack_alertmanager_additional_command_args: ""
prometheus_stack_alertmanager_receivers:
  - name: dummy
prometheus_stack_alertmanager_route:
  receiver: dummy

# Blackbox Exporter
prometheus_stack_blackbox_exporter_port: "9115"
prometheus_stack_blackbox_exporter_config_path: /etc/blackbox_exporter
prometheus_stack_blackbox_exporter_version: "v0.16.0"
prometheus_stack_blackbox_exporter_additional_command_args: ""
prometheus_stack_prometheus_blackbox_export_job:
  - job_name: 'blackbox'
    metrics_path: /probe
    params:
      module: [http_2xx]  # Look for a HTTP 200 response.
    static_configs:
      - targets:
          - http://prometheus.io    # Target to probe with http.
          - https://prometheus.io   # Target to probe with https.
          - http://example.com:8080 # Target to probe with http on port 8080.
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: blackbox:{{ prometheus_stack_blackbox_exporter_port }}  # The blackbox exporter's real hostname:port.

# Prometheus-tg-bot
prometheus_stack_prometheus_tg_bot_config_path: /etc/prometheus-tg-bot
prometheus_stack_prometheus_tg_bot_token: ""
prometheus_stack_prometheus_tg_bot_port: 9977

prometheus_stack_prometheus_alert_rules:
  - alert: monitor_service_down
    expr: up == 0
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "Monitor service non-operational"
      description: "{% raw %}Service {{ $labels.instance }} is down.{% endraw %}"
  - alert: Watchdog
    expr: vector(1)
    for: 10m
    labels:
      severity: warning
    annotations:
      description: 'This is an alert meant to ensure that the entire alerting pipeline is functional.
        This alert is always firing, therefore it should always be firing in Alertmanager
        and always fire against a receiver. There are integrations with various notification
        mechanisms that send a notification when this alert is not firing. For example the
        "DeadMansSnitch" integration in PagerDuty.'
      summary: 'Ensure entire alerting pipeline is functional'
  - alert: InstanceDown
    expr: "up == 0"
    for: 5m
    labels:
      severity: critical
    annotations:
      description: "{% raw %}{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes.{% endraw %}"
      summary: "{% raw %}Instance {{ $labels.instance }} down{% endraw %}"
  - alert: CriticalCPULoad
    expr: '100 - (avg by (instance) (irate(node_cpu_seconds_total{job="node",mode="idle"}[5m])) * 100) > 96'
    for: 2m
    labels:
      severity: critical
    annotations:
      description: "{% raw %}{{ $labels.instance }} of job {{ $labels.job }} has Critical CPU load for more than 2 minutes.{% endraw %}"
      summary: "{% raw %}Instance {{ $labels.instance }} - Critical CPU load{% endraw %}"
  - alert: CriticalRAMUsage
    expr: '(1 - ((node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes) / node_memory_MemTotal_bytes)) * 100 > 98'
    for: 5m
    labels:
      severity: critical
    annotations:
      description: "{% raw %}{{ $labels.instance }} has Critical Memory Usage more than 5 minutes.{% endraw %}"
      summary: "{% raw %}Instance {{ $labels.instance }} has Critical Memory Usage{% endraw %}"
  - alert: CriticalDiskSpace
    expr: 'node_filesystem_free_bytes{mountpoint!~"^/run(/.*|$)",fstype!~"(squashfs|fuse.*)",job="node"} / node_filesystem_size_bytes{job="node"} < 0.1'
    for: 4m
    labels:
      severity: critical
    annotations:
      description: "{% raw %}{{ $labels.instance }} of job {{ $labels.job }} has less than 10% space remaining.{% endraw %}"
      summary: "{% raw %}Instance {{ $labels.instance }} - Critical disk space usage{% endraw %}"
  - alert: RebootRequired
    expr: "node_reboot_required > 0"
    labels:
      severity: warning
    annotations:
      description: "{% raw %}{{ $labels.instance }} requires a reboot.{% endraw %}"
      summary: "{% raw %}Instance {{ $labels.instance }} - reboot required{% endraw %}"
  - alert: ClockSkewDetected
    expr: 'abs(node_timex_offset_seconds) * 1000 > 30'
    for: 2m
    labels:
      severity: warning
    annotations:
      description: "{% raw %}Clock skew detected on {{ $labels.instance }}. Ensure NTP is configured correctly on this host.{% endraw %}"
      summary: "{% raw %}Instance {{ $labels.instance }} - Clock skew detected{% endraw %}"
  - alert: SSLCertExpiring30days
    expr: 'probe_ssl_earliest_cert_expiry{job="blackbox"} - time() < 86400 * 30'
    for: 10m
    labels:
      severity: info
    annotations:
      summary: "SSL certificate warning"
      description: "{% raw %}SSL certificate for the {{ $labels.instance }} will expire within 30 days!{% endraw %}"
  - alert: EndpointDown
    expr: 'probe_success == 0'
    for: 10s
    labels:
      severity: "critical"
    annotations:
      summary: "{% raw %}Endpoint {{ $labels.instance }} down{% endraw %}"